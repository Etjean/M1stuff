source("TPmatrices.R")
source("TPmatrices.R")
source("TPmatrices.R")
source("TPmatrices.R")
source("TPmatrices.R")
source("TPmatrices.R")
source("TPmatrices.R")
source("TPmatrices.R")
source("TPmatrices.R")
source("TPmatrices.R")
source("TPmatrices.R")
source("TPmatrices.R")
iris
print(A)
eigen(A)
eigen(A)
source("TPmatrices.R")
source("TPmatrices.R")
data = read.table("helix_phospho_layer.pdb")
!ls
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
seq(0, 2, )
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
help(abline)
source("TPfonctions.R")
help(plot)
source("TPfonctions.R")
help(curve)
source("TPfonctions.R")
source("TPfonctions.R")
help(log)
log(e)
log(exp(1))
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
help(persp3d)
help(rgl)
help(rgl)
help(rgl)
help(rgl)
help(rgl)
help(rgl)
help(rgl)
help(rgl)
??rgl
rgl
?rgl
library(rgl)
help(persp3d)
?lines3d
?persp3d
example(persp3d)
q
help(persp3d)
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
?arrows
?arrows
source("TPfonctions.R")
source("TPfonctions.R")
?arrows
source("TPfonctions.R")
?arrows
?lines3d
source("TPfonctions.R")
?arrows3d
source("TPfonctions.R")
?seqgments3d
?seqgment3d
?segment3d
?segments3d
source("TPfonctions.R")
source("TPfonctions.R")
?segments3d
?lines3d
source("TPfonctions.R")
f(0.5, 0.5)
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
*
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
newton
f
newton(f,fp,0,1.e-10,20)
x=newton(f,fp,0,1.e-10,20)
x
cos(x)+x
curve(x+co(x),-10,10)
curve(x+cos(x),-10,10)
abline(h=0)
x=newton(f,fp,10,1.e-10,20)
x=newton(f,fp,10,1.e-10,20)
x=newton(f,fp,10,1.e-10,20)
source("TPfonctions.R")
source("TPfonctions.R")
x=newton(f,fp,10,1.e-10,20)
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
f
curve(f(x),-10,10)
ablines(h=0)
abline(h=0)
curve(log(1+x)-2,-10,10)
abline(h=0)
curve(log(1+x)-2,-1,20)
abline(h=0)
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
curve(f(x), -10, 10)
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
seq(inf, sup-pas, pas)
seq(-10, 10, 1)
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
curve(f(x), -10, 10)
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
?pnorm
pnorm(f)
pnorm(1)
curve(pnorm(x), -10, 10)
curve(pnorm(f(x)), -10, 10)
curve(pnorm(f(x)), -10, 10)
curve(pnorm(x), -10, 10)
?pnorm
?pnorm
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
curve(f(x), -10, 10)
abline(h=0)
?rnorm
curve(dnorm(x), -10, 10, add = T)
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
read.table("size1.dat")
source("TPfonctions.R")
fish1
fish2
fish1$size
fish1$V1
size1 = fish1$V1[2:]
size1 = fish1$V1
size1
size1[:]
size1[3]
size1[2:end]
type(size1)
class(size1)
?factor
?vector
size1
size1[100]
size1[100:102]
size1[100:]
size1[100:]
size1[100:length(size1)]
size1[1:length(size1)]
size1[2:length(size1)]
.median
?median
median[fish1$V1]
median[size1]
median[size1[2:length(size1)]
median[size1[2:length(size1)]
median[size1[2:length(size1)]]
vector(size1[2:length(size1)])
c(size1[2:length(size1)])
size1 = c(size1[2:length(size1)])
size1
median(size1)
source("TPfonctions.R")
fish1
fish1
source("TPfonctions.R")
fish1
median(fish1$size)
fish1$size[which(fish1$size > median(fish1$size))]
source("TPfonctions.R")
fish1$sexe[which(fish1$size > median(fish1$size))]
fish1$sex[which(fish1$size > median(fish1$size))]
source("TPfonctions.R")
sex2
TP1 = length(which(male1 == "M"))
tp1
TP1
which(male1 == "M")
which(sex1 == "M")
TP1 = length(which(male1 == "M"))
TP1
TP1 = length(which(msex1 == "M"))
TP1 = length(which(sex1 == "M"))
TP1
source("TPfonctions.R")
T2
TP2
T1
TP1
source("TPfonctions.R")
source("TPfonctions.R")
sens1
sens2
spec1
spec2
source("TPfonctions.R")
source("TPfonctions.R")
specz1
sensz1
source("TPfonctions.R")
source("TPfonctions.R")
plot(1-specz1, sens1)
plot(1-specz1, sensz1)
plot(1-specz1, sensz1, "l")
plot(1-specz2, sensz2, "l", add = T)
plot(1-specz1, sensz1, "l")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
source("TPfonctions.R")
?plot
source("TPfonctions.R")
source("TPfonctions.R")
max(fish1$size)
max(fish2$size)
max(c(fish2$size, fish1$size))
source("TPfonctions.R")
fish1$size
source("TPfonctions.R")
sensz1
source("TPfonctions.R")
trapezes(sensz1)
trapezes(sensz2)
source("TPmatrices.R")
source("BaMethodo.R")
source("BaMethodo.R")
source("BaMethodo.R")
source("BaMethodo.R")
source("BaMethodo.R")
source("BaMethodo.R")
source("BaMethodo.R")
source("BaMethodo.R")
?unlist
data.read("descriptor_pocket.mat")
data("descriptor_pocket.mat")
?data
?data.read
read.table("descriptor_pocket.mat")
pockets = read.table("descriptor_pocket.mat")
pockets
?na.omit
is.na(pockets)
na.omit(pockets)
is.na(na.omit(pockets))
pockets = na.omit(pockets)
pockets
length(pockets)
length(read.table("descriptor_pocket.mat"))
length(read.table("descriptor_pocket.mat"), 0)
size(read.table("descriptor_pocket.mat"))
?length
?size
??size
?class
class(pockets)
?? size data.frame
?? sizedata.frame
dim(pockets)
names(pockets)
aromatic = c()
for (i in pockets){
pockets$F
? apply
apply(pockets$F, pockets$Y, pockets$H, pockets$W, sum)
apply("pockets$F", "pockets$Y", "pockets$H", "pockets$W", sum)
? apply
apply(c(pockets$F, pockets$Y, pockets$H, pockets$W), sum)
apply(c(pockets$F, pockets$Y, pockets$H, pockets$W), sum())
apply(c(pockets$F, pockets$Y, pockets$H, pockets$W), sum, 2)
? apply
apply(c(pockets$F, pockets$Y, pockets$H, pockets$W), 2, sum)
apply(c(pockets$F, pockets$Y, pockets$H, pockets$W), 2, sum())
apply(cbind(pockets$F, pockets$Y, pockets$H, pockets$W), 2, sum)
cbind(pockets, apply(cbind(pockets$F, pockets$Y, pockets$H, pockets$W), 1, sum)
?colname
?colnames
apply(cbind(pockets$F, pockets$Y, pockets$H, pockets$W), 1, sum)
cbind(pockets, apply(cbind(pockets$F, pockets$Y, pockets$H, pockets$W), 1, sum)
apply(cbind(pockets$F, pockets$Y, pockets$H, pockets$W), 1, sum)
cbind(pockets, apply(cbind(pockets$F, pockets$Y, pockets$H, pockets$W), 1,
cbind(pockets, apply(cbind(pockets$F, pockets$Y, pockets$H, pockets$W), 1, sum)
cbind(pockets, apply(cbind(pockets$F, pockets$Y, pockets$H, pockets$W), 1, sum))
source("TP_ADB1.R")
pockets
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
dim(pockets)
names(pockets)
pockets$C_ATOM
pockets$C_RESIDUES
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
names(pockets)
names(pockets)
source("TP_ADB1.R")
names(pockets)
dim(pockets)
?colnames
colnames(pockets)
colnames(pockets[1]) = "drugg"
colnames(pockets)
source("TP_ADB1.R")
colnames(pockets)
?cbind
source("TP_ADB1.R")
noms
source("TP_ADB1.R")
names(pockets)
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
as.factor(pockets)
as.factor(pockets$drugg)
as.factor(pockets$drugg)
source("TP_ADB1.R")
source("TP_ADB1.R")
pockets$drugg == 1
pockets
pockets$drugg == 1
pockets$polar[pockets$drugg == 1]
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
?hist
source("TP_ADB1.R")
?hist
source("TP_ADB1.R")
source("TP_ADB1.R")
source("TP_ADB1.R")
dist(pockets)
dist(pockets[,-37])
pockets = read.table("descriptor_pocket.mat")
source('~/Github/TP_ADB1.R')
plot(cars)
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
source('~/Github/TP_ADB1.R')
knitr::opts_chunk$set(echo = TRUE)
pockets.tree = hclust(pockets.dist, method = "ward.D2")
plot(cars)
pockets = read.table("descriptor_pocket.mat")
names(pockets)
dim(pockets)
#is.na(pockets)
pockets = na.omit(pockets)
dim(pockets)
aromatic = apply(cbind(pockets$F, pockets$Y, pockets$H, pockets$W), 1, sum)
polar = apply(cbind(pockets$C, pockets$D, pockets$E, pockets$H, pockets$K, pockets$N, pockets$Q, pockets$R, pockets$S, pockets$T, pockets$W, pockets$Y), 1, sum)
aliphatic = apply(cbind(pockets$I, pockets$L, pockets$V), 1, sum)
charged = apply(cbind(pockets$D, pockets$E, pockets$R, pockets$K, pockets$H), 1, sum)
negative = apply(cbind(pockets$D, pockets$E), 1, sum)
positive = apply(cbind(pockets$R, pockets$K, pockets$H), 1, sum)
hydrophobic = apply(cbind(pockets$C, pockets$G, pockets$A, pockets$T, pockets$V, pockets$L, pockets$I, pockets$M, pockets$F, pockets$W, pockets$H, pockets$Y, pockets$K), 1, sum)
small = apply(cbind(pockets$C, pockets$G, pockets$A, pockets$T, pockets$V, pockets$S, pockets$D, pockets$N, pockets$P), 1, sum)
tiny = apply(cbind(pockets$A, pockets$C, pockets$G, pockets$S), 1, sum)
pockets = cbind(pockets, aromatic, polar, aliphatic, charged, negative, positive, hydrophobic, small, tiny)
#mise de "drugg" Ã  la fin du tableau
noms = names(pockets)
pockets = cbind(pockets[,1:27], pockets[,29:37], pockets[,28])
colnames(pockets)[37] = noms[28]
names(pockets)   #37 descriptors
boxplot(scale(pockets[,-37]), las=2)
#ma version
hist(pockets$polar[pockets$drugg == 1], freq=F, col = "purple", xlim = c(0, 1))
hist(pockets$polar[pockets$drugg == 0], freq=F, col =rgb(1,0,0,0.5), add=T)
#version prof
# par(mfrow = c(1, 2))
# for (i in c(1:36))
#     by(pockets[,i], pockets$drugg, hist, main = "un histogramme")
#ma version
# for (i in 1:36){
#     print(mean(pockets[,i][pockets$drugg == 1]))
#     print(mean(pockets[,i][pockets$drugg == 0]))
#     print(sd(pockets[,i][pockets$drugg == 1]))
#     print(sd(pockets[,i][pockets$drugg == 0]))
# }
#version prof
# lapply(pockets, mean)
# lapply(pockets, sd)
print(means <- aggregate(pockets[,-37], by=list(pockets$drugg), FUN = mean))
print(sds <- aggregate(pockets[,-37], by=list(pockets$drugg), FUN = sd))
pockets.pvalues = c()
for (i in 1:36){
# Optionnel, il faudrait comparer les variances, comme condition d'application du Student
#    var.test(pockets[,i][pockets$drugg == 1], pockets[,i][pockets$drugg == 0])
pvalue = t.test(pockets[,i][pockets$drugg == 1], pockets[,i][pockets$drugg == 0])$p.value
pockets.pvalues = c(pockets.pvalues, pvalue)
}
pockets.pvalues
drug.corr = cor(pockets[,-37])
library(corrplot)
corrplot(drug.corr)
plot(pockets$polar, pockets$hydrophobic)
plot(pockets$Real_volume, pockets$C_ATOM)
pockets.dist = dist(scale(pockets[,-37]))
# donne un matrice triangulaire infÃ©rieure de la distance de tous les rÃ©sidus 2 Ã  2
pockets.tree = hclust(pockets.dist, method = "ward.D2")
plot(pockets.tree, hang=-1, labels = pockets$drugg)
rect.hclust(pockets.tree, k = 4, border = "red")
rect.hclust(pockets.tree, k = 6, border = "red")
rect.hclust(pockets.tree, k = 8, border = "red")
