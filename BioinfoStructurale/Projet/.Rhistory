if (!require("animation")) install.packages("animation")
library(animation)
if (!require("scatterplot3d")) install.packages("scatterplot3d")
library(scatterplot3d)
if (!require("rgl")) install.packages("rgl")
library(rgl)
if (!require("animation")) install.packages("animation")
library(animation)
if (!require("scatterplot3d")) install.packages("scatterplot3d")
library(scatterplot3d)
if (!require("rgl")) install.packages("rgl")
library(rgl)
if (!require("animation")) install.packages("animation")
library(animation)
if (!require("scatterplot3d")) install.packages("scatterplot3d")
library(scatterplot3d)
if (!require("rgl")) install.packages("rgl")
library(rgl)
file <- readline(prompt="Entrer le nom du fichier: ")
data = read.table(file, header=T)
GRMS = data$GRMS
Vpot = data$Vpot
nstep = length(GRMS)
st = 1
ft = nstep
times = st:ft
animGRMS <- function(times) {
for(i in seq_along(times)) {
title = paste("Evolution du GRMS au cours de la minimisation\n", "GRMS =", format(GRMS[i], scientific=TRUE, digits=3))
plot(GRMS, type = 'l', xlab = 'minimisation step', main = title)
points(i, GRMS[i], col = "red")
animation::ani.pause()
}
}
saveGIF(expr = animGRMS(times), interval=.01, outdir = getwd(), movie.name="animGRMS.gif")
animVPOT <- function(times) {
for(i in seq_along(times)) {
title = paste("Evolution de l'énergie potentielle au cours de la minimisation\n", "Vpot =", format(Vpot[i], scientific=TRUE, digits=3), "kcal/mol")
plot(Vpot, type = 'l', xlab = 'minimisation step', main = title)
points(i, Vpot[i], col = "red")
animation::ani.pause()
}
}
saveGIF(expr = animVPOT(times), interval=.01, outdir = getwd(), movie.name="animVPOT.gif")
#lim = c(min(c(data$xO,data$xH1,data$xH2))-0.5,max(c(data$xO,data$xH1,data$xH2))+0.5,min(c(data$yO,data$yH1,data$yH2))-0.5,max(c(data$yO,data$yH1,data$yH2))+0.5, min(c(data$zO,data$zH1,data$zH2))-0.5,max(c(data$zO,data$zH1,data$zH2))+0.5)
lim = c(min(c(data$xO,data$xH1,data$xH2)),max(c(data$xO,data$xH1,data$xH2)),min(c(data$yO,data$yH1,data$yH2)),max(c(data$yO,data$yH1,data$yH2)), min(c(data$zO,data$zH1,data$zH2)),max(c(data$zO,data$zH1,data$zH2)))
animH2O <- function(times, lim) {
for(i in seq_along(times)) {
x = c(data$xH1[i], data$xO[i], data$xH2[i])
y = c(data$yH1[i], data$yO[i], data$yH2[i])
z = c(data$zH1[i], data$zO[i], data$zH2[i])
title = paste("Mouvements de la molécule en 3D \nstep", i)
s = scatterplot3d(x = x, y = y, z = z, cex.symbols=6, color="red", xlim=lim[1:2], ylim=lim[3:4], zlim=lim[5:6], type="h", lty.hplot=2, main=title)
p1 <- s$xyz.convert(x[1],y[1],z[1])
p2 <- s$xyz.convert(x[2],y[2],z[2])
p3 <- s$xyz.convert(x[3],y[3],z[3])
segments(p2$x,p2$y,p3$x,p3$y,lwd=1,col="black")
segments(p2$x,p2$y,p1$x,p1$y,lwd=1,col="black")
}
}
saveGIF(expr = animH2O(times, lim), interval=.1, outdir = getwd(), movie.name="anim3D.gif")
# Translation par rapport à O
data2 = data[,4:12]
data2[,c(1,4,7)] = data2[,c(1,4,7)] - data2[,1]
data2[,c(2,5,8)] = data2[,c(2,5,8)] - data2[,2]
data2[,c(3,6,9)] = data2[,c(3,6,9)] - data2[,3]
# Distances
xH1 = sqrt((data$xH1-data$xO)**2 + (data$yH1-data$yO)**2 + (data$zH1-data$zO)**2)
dOH2 = sqrt((data$xH2-data$xO)**2 + (data$yH2-data$yO)**2 + (data$zH2-data$zO)**2)
# Angle
vOH1 = data2[,c(1,2,3)] - data2[,c(4,5,6)]
vOH2 = data2[,c(1,2,3)] - data2[,c(7,8,9)]
theta = acos(apply(vOH1*vOH2, 1, sum) / (sqrt(apply(vOH1*vOH1, 1, sum)) * sqrt(apply(vOH2*vOH2, 1, sum))))
deg = (theta*180)/pi
# Coordonées polaire à cartésienne pour H2
xH2 = dOH2*cos(theta)
yH2 = dOH2*sin(theta)
data2D = cbind(xO=data2$xO, yO=data2$yO, xH1=xH1, yH1=data2$xO, xH2=xH2, yH2=yH2)
lim2D = c(min(c(data2D[,1],data2D[,3],data2D[,5]))-0.3,max(c(data2D[,1],data2D[,3],data2D[,5]))+0.3,min(c(data2D[,2],data2D[,4],data2D[,6]))-0.3,max(c(data2D[,2],data2D[,4],data2D[,6]))+0.3)
#lim2D = c(min(c(data2D[,1],data2D[,3],data2D[,5])),max(c(data2D[,1],data2D[,3],data2D[,5])),min(c(data2D[,2],data2D[,4],data2D[,6])),max(c(data2D[,2],data2D[,4],data2D[,6])))
anim2D <- function(times, lim) {
for(i in seq_along(times)) {
x = c(data2D[i,3], data2D[i,1], data2D[i,5])
y = c(data2D[i,4], data2D[i,2], data2D[i,6])
title = paste("Mouvements de la molécule en 2D \nstep", i)
plot(x=x, y=y , main=title, xlim=lim2D[1:2], ylim=lim2D[3:4], type="p", pch=19, cex=c(18,25,18), col=c("steelblue2","firebrick3","steelblue2"))
lines(x=x, y=y, type="l", lwd=2, lty=5, col="grey39")
animation::ani.pause()
}
}
saveGIF(expr = anim2D(times, lim2D), interval=.01, outdir = getwd(), movie.name="anim2D.gif")
