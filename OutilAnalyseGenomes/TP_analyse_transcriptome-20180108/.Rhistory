source("https://bioconductor.org/biocLite.R")
biocLite("limma")
dataArrays <- read.table("Microarrays_logValues_parapsilosis.txt", header = T, row.names = 1)
head(dataArrays)
tail(dataArrays)
# rename colnames according to microarray numbers
colnames(dataArrays) <- c("log2(H/N)_rep1", "log2(H/N)_rep2", "log2(H/N)_rep3", "log2(H/N)_rep4")
#check the structure of the new R object
str(dataArrays)
options(width=160)
head(dataArrays)
averageLog <- apply(dataArrays, 1, mean) # mean value for log2(H/N) replicates for each gene
sdValues <- apply(dataArrays, 1, sd)  # sandard deviation for log2(H/N) replicates for each gene
plot(sdValues, averageLog, 
main = "C. parapsilosis - Microarrays",
xlab = "Standard deviations", ylab = "Average log2FC",
pch = 20)
abline(h = 2, col = "red", lty = "dashed")
abline(h = -2, col = "green", lty = "dashed")
tval <- averageLog/(sdValues/sqrt(ncol(dataArrays))) # tvalues
critical_0.05_t <- qt(1-0.05/2, 4-1)  # calculate t threshold for type 1 error = 5%
length(tval[which(abs(tval) > critical_0.05_t)]) # number of genes with pval < 5%
length(tval[which(tval > critical_0.05_t)])      # number of genes upregulated with pval < 5%
length(tval[which(tval < -critical_0.05_t)])      # number of genes downregulated with pval < 5%
length(tval)
critical_0.0001_t <- qt(1-0.0001/2, 4-1)
length(tval[which(abs(tval) > critical_0.0001_t)])
length(tval[which(tval > critical_0.0001_t)])
length(tval[which(tval < -critical_0.0001_t)])
critical_bonf_t <- qt(1-(0.05/(2*length(tval))), 4-1) 
length(tval[which(abs(tval) > critical_bonf_t )])
length(tval[which(tval > critical_bonf_t )])
length(tval[which(tval < -critical_bonf_t )])
upGenes.t <- names(tval[which(tval > critical_bonf_t )])
downGenes.t <- names(tval[which(tval < -critical_bonf_t )])
plot(averageLog, tval,
main = "C. parapsilosis - Microarrays dataset",
ylab = "tval (Student parameter)", xlab = "LogFC (average value)",
pch = 20)
abline(h = 0, col = "black")
abline(v = 0, col = "black")
abline(h = critical_bonf_t, col = "red", lty = "dashed")
abline(h = -critical_bonf_t, col = "green", lty = "dashed")
points(averageLog[upGenes.t],tval[upGenes.t], col = "red", pch = 20)
points(averageLog[downGenes.t],tval[downGenes.t], col = "green", pch = 20)
qt -h
help(qt)
fit <- lmFit(dataArrays)   # Linear model estimation
limmaRes <- eBayes(fit)   # Bayesian statistics
limmaTable <- topTable(limmaRes, number = nrow(dataArrays))
limmaRes2 <- limmaTable[row.names(dataArrays),]# sort genes according to their initial order in dataArrays
library (limma) ## The limma package is a Bioconductor R package dedicated to expression microarrays differential analysis. It is now also used for RNASeq data. You may checked it is well loaded by running the command on line 25 again (SessionInfo())
library (limma) ## The limma package is a Bioconductor R package dedicated to expression microarrays differential analysis. It is now also used for RNASeq data. You may checked it is well loaded by running the command on line 25 again (SessionInfo())
library (limma) ## The limma package is a Bioconductor R package dedicated to expression microarrays differential analysis. It is now also used for RNASeq data. You may checked it is well loaded by running the command on line 25 again (SessionInfo())
fit <- lmFit(dataArrays)   # Linear model estimation
limmaRes <- eBayes(fit)   # Bayesian statistics
limmaTable <- topTable(limmaRes, number = nrow(dataArrays))
limmaRes2 <- limmaTable[row.names(dataArrays),]# sort genes according to their initial order in dataArrays
plot(limmaRes2[, "logFC"], averageLog, pch = 20, xlab = "logFC calculated with LIMMA", ylab = "LogFC (average value)")
cor.test(limmaRes2[, "logFC"], averageLog)
plot(limmaRes2[, "logFC"], averageLog, pch = 20, xlab = "logFC calculated with LIMMA", ylab = "LogFC (average value)")
cor.test(limmaRes2[, "logFC"], averageLog)
abline(1, 0)
plot(limmaRes2[, "logFC"], averageLog, pch = 20, xlab = "logFC calculated with LIMMA", ylab = "LogFC (average value)")
cor.test(limmaRes2[, "logFC"], averageLog)
abline(0, 1)
plot(averageLog, tval,
main = "C. parapsilosis - Microarrays dataset",
ylab = "t (Student in black and LIMMA in purple)", xlab = "LogFC (average value)",
pch = 20)
points(averageLog, limmaRes2[,"t"], pch = 20, col = "purple")
abline(h = 0, col = "black")
abline(v = 0, col = "black")
length(which(limmaRes2$adj.P.Val < 0.0001))
dim(limmaRes2[which(limmaRes2$adj.P.Val < 0.0001 & limmaRes2$logFC > 0),])
dim(limmaRes2[which(limmaRes2$adj.P.Val < 0.0001 & limmaRes2$logFC < 0),])
upGenes.limma <- limmaRes2[which(limmaRes2$adj.P.Val < 0.0001 & limmaRes2$logFC > 0),]
downGenes.limma <- limmaRes2[which(limmaRes2$adj.P.Val < 0.0001 & limmaRes2$logFC < 0),]
plot(-log10(limmaRes2$adj.P.Val) ~ limmaRes2$logFC, pch="", xlim=c(-6,6),ylim=c(0,7), xlab="",ylab="",bty="n",xaxt="n", yaxt="n"  )
title("Hypoxia versus Normoxia", font.main=1, cex.main=0.9)
axis(1, at=-6:6, tcl=-0.5,cex=0.7, labels=F )
mtext(-6:6,side=1,line=1,at=-6:6, cex=0.7)
axis(2, at=0:7, tcl=-0.2,cex=0.7, labels=F )
mtext(0:7,side=2,line=0.5,at=0:7, cex=0.7)
points(-log10(limmaRes2$adj.P.Val) ~ limmaRes2$logFC, pch=16, cex=0.5, col="grey")
points(-log10(upGenes.limma$adj.P.Val) ~ upGenes.limma$logFC,pch=16, cex=0.5, col="red")
points(-log10(downGenes.limma$adj.P.Val) ~ downGenes.limma$logFC,pch=16,cex=0.5, col="green")
mtext("log2(FC)", side = 1, line = 2, cex=0.8)
mtext("-log10 (adjusted p-value)", side=2, line=1.5, cex=0.8)
length(intersect(downGenes.t,row.names(upGenes.limma)))
length(setdiff(row.names(downGenes.limma), upGenes.t))
length(setdiff(downGenes.t,row.names(upGenes.limma)))
length(intersect(downGenes.t,row.names(downGenes.limma)))
length(setdiff(row.names(downGenes.limma), downGenes.t))
length(setdiff(downGenes.t,row.names(downGenes.limma)))
write.table(dataArrays.analyzed, quote = F, sep = "\t", file = "Microarrays_diffAnalysis.txt", row.name=F)
limmaRes2
colnames(limmaRes2)
limmaRes2[which(limmaRes2$logFC > 4),]
limmaRes2[which(limmaRes2$adj.P.Val < 1e-5),]
